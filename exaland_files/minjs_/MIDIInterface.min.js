var $jscomp={scope:{}};$jscomp.defineProperty="function"==typeof Object.defineProperties?Object.defineProperty:function(a,c,b){if(b.get||b.set)throw new TypeError("ES3 does not support getters and setters.");a!=Array.prototype&&a!=Object.prototype&&(a[c]=b.value)};$jscomp.getGlobal=function(a){return"undefined"!=typeof window&&window===a?a:"undefined"!=typeof global&&null!=global?global:a};$jscomp.global=$jscomp.getGlobal(this);$jscomp.SYMBOL_PREFIX="jscomp_symbol_";
$jscomp.initSymbol=function(){$jscomp.initSymbol=function(){};$jscomp.global.Symbol||($jscomp.global.Symbol=$jscomp.Symbol)};$jscomp.symbolCounter_=0;$jscomp.Symbol=function(a){return $jscomp.SYMBOL_PREFIX+(a||"")+$jscomp.symbolCounter_++};
$jscomp.initSymbolIterator=function(){$jscomp.initSymbol();var a=$jscomp.global.Symbol.iterator;a||(a=$jscomp.global.Symbol.iterator=$jscomp.global.Symbol("iterator"));"function"!=typeof Array.prototype[a]&&$jscomp.defineProperty(Array.prototype,a,{configurable:!0,writable:!0,value:function(){return $jscomp.arrayIterator(this)}});$jscomp.initSymbolIterator=function(){}};$jscomp.arrayIterator=function(a){var c=0;return $jscomp.iteratorPrototype(function(){return c<a.length?{done:!1,value:a[c++]}:{done:!0}})};
$jscomp.iteratorPrototype=function(a){$jscomp.initSymbolIterator();a={next:a};a[$jscomp.global.Symbol.iterator]=function(){return this};return a};$jscomp.makeIterator=function(a){$jscomp.initSymbolIterator();var c=a[Symbol.iterator];return c?c.call(a):$jscomp.arrayIterator(a)};$jscomp.array=$jscomp.array||{};
$jscomp.iteratorFromArray=function(a,c){$jscomp.initSymbolIterator();a instanceof String&&(a+="");var b=0,d={next:function(){if(b<a.length){var f=b++;return{value:c(f,a[f]),done:!1}}d.next=function(){return{done:!0,value:void 0}};return d.next()}};d[Symbol.iterator]=function(){return d};return d};
$jscomp.polyfill=function(a,c,b,d){if(c){b=$jscomp.global;a=a.split(".");for(d=0;d<a.length-1;d++){var f=a[d];f in b||(b[f]={});b=b[f]}a=a[a.length-1];d=b[a];c=c(d);c!=d&&null!=c&&$jscomp.defineProperty(b,a,{configurable:!0,writable:!0,value:c})}};$jscomp.polyfill("Array.prototype.values",function(a){return a?a:function(){return $jscomp.iteratorFromArray(this,function(a,b){return b})}},"es6","es3");
MIDIInterface=function(){function a(a){console.log("MIDI init",a);for(var f=$jscomp.makeIterator(a.inputs.values()),c=f.next();!c.done;c=f.next())c.value.onmidimessage=b;a.onstatechange=function(a){a.port.onmidimessage="pending"!==a.port.connection&&"closed"!==a.port.connection?b:null}}function c(a){console.error(a)}function b(a){var c=a.data[0],b=a.data[0]&15,f=a.data[1];a=a.data[2];for(var h=$jscomp.makeIterator(d),g=h.next();!g.done;g=h.next())if(g=g.value,b==g.midi[0]&&f==g.midi[1])for(var g=
$jscomp.makeIterator(g.callbacks),e=g.next();!e.done;e=g.next())(e=e.value,e.isTrigger)?e.isTrigger&&145==c&&(void 0===e.debounce&&(e.debounce=0),0==e.debounce&&e.func.call(e.ctx,a),e.debounce=(e.debounce+1)%2):e.func.call(e.ctx,a)}var d=[];navigator.requestMIDIAccess?navigator.requestMIDIAccess().then(a,c):console.error(" WebMIDI API is not supported by this browser","every registered action will be ignored");return{registerCallback:function(a){a:{if(void 0===a.callbacks){if(void 0===a.callback||
void 0===a.context){console.error("you must provide callback and context in params");break a}a.callbacks=[{func:a.callback,ctx:a.context,isTrigger:a.isTrigger}]}else for(var c=$jscomp.makeIterator(a.callbacks),b=c.next();!b.done;b=c.next())if(b=b.value,void 0===b.func||void 0===b.ctx){console.error("you must provide func and ctx for every callback in callbacks you want register");break a}d.push(a)}},register:d}};
